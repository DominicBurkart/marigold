use crate::nodes;

grammar;

pub Expr: String = {
  Stream
  // next up: Declaration
}

Stream: String = {
  <inp: InputFunction> <funs:("." <StreamFunction>)*> "." <out: OutputFunction> => {
      let exp = nodes::StreamNode {
        inp,
        funs,
        out
      };
      exp.code()
    },
}

InputFunction: nodes::InputFunctionNode = {
  "range(" <n1: r"[0-9]+"> "," <n2: r"[0-9]+"> ")" => nodes::InputFunctionNode{
    variability: nodes::InputVariability::Constant,
    input_count: nodes::InputCount::Known((n2.parse::<num_bigint::BigInt>().unwrap() - n1.parse::<num_bigint::BigInt>().unwrap()).to_biguint().unwrap()),
    code: format!("::marigold::marigold_impl::futures::stream::iter({n1}..{n2})"),
  },
  "read_file(" <path: r#""[0-9A-Za-z/._\-]+""#> "," "csv" ")" => nodes::InputFunctionNode {
    variability: nodes::InputVariability::Variable,
    input_count: nodes::InputCount::Unknown,
    code: format!("::marigold::marigold_impl::csv_async::AsyncReader::from_reader(
      ::marigold::marigold_impl::async_std::fs::File::open({path})
        .await
        .expect(\"Marigold could not open file\")
    ).into_records()")
  },
  "read_file(" <path: r#""[0-9A-Za-z/._\-]+""#> "," "csv" "," "struct" "=" <deserialization_struct: r"[a-zA-Z_]+"> ")" => nodes::InputFunctionNode {
    variability: nodes::InputVariability::Variable,
    input_count: nodes::InputCount::Unknown,
    code: format!("
      ::marigold::marigold_impl::csv_async::AsyncDeserializer::from_reader(
        ::marigold::marigold_impl::async_std::fs::File::open({path})
          .await
          .expect(\"Marigold could not open file\")
      )
      .into_deserialize::<{deserialization_struct}>()
    ")
  }
}

StreamFunction: nodes::StreamFunctionNode = {
  "permutations("<n: r"[0-9]+"> ")" => nodes::StreamFunctionNode {
    code: format!("permutations({n}).await")
  },
  "permutations_with_replacement("<n: r"[0-9]+"> ")" => nodes::StreamFunctionNode {
    code: format!("collect_and_apply(|values| async {{
              ::marigold::marigold_impl::gen_nested_iter_yield::nested_iter_yield!(values.iter(), {n}, .to_owned(), ::marigold::marigold_impl::)
          }})
          .await
          .await
    ")
  },
  "combinations("<n: r"[0-9]+"> ")" =>  nodes::StreamFunctionNode {
    code: format!("combinations({n}).await")
  },
  "keep_first_n(" <n: r"[0-9]+"> "," <value_fn: r"[a-zA-Z_]+"> ")" =>  nodes::StreamFunctionNode {
    code: format!("keep_first_n({n}, {value_fn}).await")
  },
  "filter(" <filter_fn: r"[a-zA-Z_]+"> ")" => nodes::StreamFunctionNode {
    code: format!("filter(|v| futures::future::ready({filter_fn}(v)))")
    // filters have a bad type that doesn't allow them to compile if passed
    // an actual async function, so wrap a sync function in a fake future until
    // the filter types are updated.
  },
  "filter_map(" <filter_map_fn: r"[a-zA-Z_]+"> ")" => nodes::StreamFunctionNode {
    code: format!("filter_map({filter_map_fn})")
  },
  "to_vec()" =>  nodes::StreamFunctionNode {
    code: format!("collect::<std::vec::Vec<_>>().await")
  },
  "map(" <mapping_fn: r"[a-zA-Z_]+"> ")" => nodes::StreamFunctionNode {
    code: format!("map({mapping_fn})")
  },
  "ok()" => nodes::StreamFunctionNode {
    code: format!("filter(|r| futures::future::ready(r.is_ok()))
      .map(|r| r.unwrap())")
  },
  "ok_or_panic()" => nodes::StreamFunctionNode {
    code: "map(|r| r.unwrap())".to_string()
  }
}

OutputFunction: nodes::OutputFunctionNode = {
  "return" => nodes::OutputFunctionNode {
    stream_prefix: "return".to_string(),
    stream_postfix: ";".to_string(),
  },
  "write_file(" <path: r#""[0-9A-Za-z/._\-]+""#> "," "csv" ")" => nodes::OutputFunctionNode {
    stream_prefix: format!("{{

      if let Some(parent) = ::marigold::marigold_impl::async_std::path::Path::new({path}).parent() {{
        ::marigold::marigold_impl::async_std::fs::create_dir_all(parent)
          .await
          .expect(\"could not create parent directory for output file\");
      }}

      let mut output_csv_writer = std::sync::Arc::new(
        ::marigold::marigold_impl::async_std::sync::Mutex::new(
          ::marigold::marigold_impl::csv_async::AsyncSerializer::from_writer(
            ::marigold::marigold_impl::async_std::fs::File::create({path})
               .await
               .expect(\"Could not write to file\")
          )
        )
      );

      let mut stream_to_write =

     "),
    stream_postfix: "
        ;
        {
          let cloned_writer = output_csv_writer.clone();
          stream_to_write.for_each(
            |v| async {
              cloned_writer
                .clone()
                .lock()
                .await
                .serialize(v)
                .await
                .expect(\"could not write record to CSV\");
            }
          ).await;
        }
    }".to_string(),
  }
}
