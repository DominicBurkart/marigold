use crate::expressions::StreamExpr;

grammar;

pub Expr: String = {
  Stream
  // next up: Declaration
}

Stream: String = {
  <inp: InputFunction> <funs:("." <StreamFunction>)*> "." <out: OutputFunction> => {
      let exp = StreamExpr {
        inp,
        funs,
        out
      };
      exp.code()
    },
}

InputFunction: String = {
  "range(" <n: r"[0-9]+"> ")" => format!("(0..{n})"),
  "range(" <n1: r"[0-9]+"> "," <n2: r"[0-9]+"> ")" => format!("({n1}..{n2})"),
}

StreamFunction: String = {
  "permutations("<n: r"[0-9]+"> ")" => format!("permutations({n})"),
  "combinations("<n: r"[0-9]+"> ")" => format!("combinations({n})"),
  "keep_first_n(" <n: r"[0-9]+"> "," <value_fn: r"[a-zA-Z_]"> ")" => format!("sorted_by({value_fn}).take({n})"),
}

OutputFunction: String = {
  "return" => "".to_string()
}
